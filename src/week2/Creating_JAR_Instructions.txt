	Jar	 - The Jar utility
	
	located
	# /usr/local/java/jdk1.8.0_91/bin
	
	Creating a jar file:
	# jar -cvf jarFile path[path][...]
	
	List the contents of the jarFile
	# jar -tvf jarFile [path][..]
	
	Extract the contents of the jarFile
	# jar -xvf jarFile [path][..]
	
	Example:
	
	create:
	jar cvf MySpiffyApp.jar MySpiffyApp
	
	after creation, to list the contents:
	jar tvf MySpiffyApp.jar
	
	to make runnable create a manifest file = MANIFEST.MF
	
	Main-Class: MySpiffyApp.MyAppClassName
	
	MySpiffyApp = package name
	MyAppClassName = is the name of the Main class
	
	inject the manifest file
	# jar -cvmf MANIFEST.MF MySpiffyApp.jar MySpiffyApp
	
	run 
	# java -jar MySpiffyApp.jar
	
	
	============================================================
	Example (can't seem to make this work with packages)
	
	1. create a project name
	2. inside create 2 (or 3) folders, 
		classes
		source
	3. Copy all the *.java to the "source" folder (remove all the package references at the beginning of each file)
	4. go to command line, and compile .java to .classes which place compiled files into the ../classes folder
		# javac -d ../classes *.java
		To include database jar file (mysql-connector-java-5.1.42-bin.jar)
		- copy that file also into /classes/ folder
		- also any configuration.properties files
		
	5. 	In the classes directory, create a file called manifest.txt containing the file with the 'main' class
	
	-> (must end with a CRLF)
	Main-Class: InventoryProgramMainApp
	
	-> to include database
	Class-Path: mysql-connector-java-5.1.42-bin.jar
	Main-Class: InventoryProgramMainApp

	

	6. From inside your classes/ type:
	# jar -cvmf manifest.txt InventoryProgramMainApp.jar *.class
	
	added manifest
	adding: InventoryBOOK.class(in = 1020) (out= 448)(deflated 56%)
	adding: InventoryCD.class(in = 1023) (out= 443)(deflated 56%)
	adding: InventoryDVD.class(in = 1021) (out= 450)(deflated 55%)
	adding: InventoryItems.class(in = 975) (out= 460)(deflated 52%)
	adding: InventoryProgramController.class(in = 1431) (out= 618)(deflated 56%)
	adding: InventoryProgramMainApp.class(in = 778) (out= 466)(deflated 40%)
	adding: InventoryProgramModel.class(in = 2055) (out= 897)(deflated 56%)
	adding: InventoryProgramPersistance$1.class(in = 774) (out= 458)(deflated 40%)
	adding: InventoryProgramPersistance.class(in = 7925) (out= 4123)(deflated 47%)
	adding: InventoryProgramPersistance$ItemType.class(in = 1068) (out= 535)(deflated 49%)
	adding: InventoryProgramStoreOperations.class(in = 494) (out= 231)(deflated 53%)
	adding: InventoryProgramView.class(in = 4209) (out= 2104)(deflated 50%)
	adding: Observer.class(in = 251) (out= 201)(deflated 19%)
	adding: Subject.class(in = 1012) (out= 591)(deflated 41%)

	
	7. execute:
	# java -jar InventoryProgramMainApp.jar
	
	To include a database driver when executing the program
	# java -cp .:mysql-connector-java-5.1.42-bin.jar InventoryProgramMainApp

		
	List: # jar -tvf InventoryProgramMainApp.jar
	

	
	=== 
	
	Additional with database:
	
	http://www.codejava.net/java-core/tools/how-to-compile-package-and-run-a-java-program-using-command-line-tools-javac-jar-and-java
	
	
		
	
